# This file was *autogenerated* from the file ./Data_Analysis.sage.
from sage.all_cmdline import *   # import sage library
_sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_7 = Integer(7); _sage_const_6 = Integer(6); _sage_const_5 = Integer(5); _sage_const_4 = Integer(4); _sage_const_9 = Integer(9); _sage_const_8 = Integer(8); _sage_const_13 = Integer(13); _sage_const_12 = Integer(12); _sage_const_11 = Integer(11); _sage_const_10 = Integer(10); _sage_const_p1 = RealNumber('.1'); _sage_const_15 = Integer(15); _sage_const_14 = Integer(14); _sage_const_30 = Integer(30); _sage_const_p8 = RealNumber('.8')#! /usr/bin/env sage
'''
Code to analyse data from first 4 weeks of MAT001. Variables are:

0. Timestamp
1. Student_Number
2. Learner_Type
3. Ease_of_Access
4. Ease_of_Reading
5. Watch_Prior
6. Watch_Post
7. Sage_Lab
8. Sage_Home
9. Gplus_Look
10. Comments_re_Delivery
11. Troublesome_Parts
12. Comments_re_Troublesome
13. Motivating_Parts
14. Comments_re_Motivating
15. AoB
'''

class Student():
    def __init__(self,Student_Number,Learner_Type,Ease_of_Access,Ease_of_Reading,Watch_Prior,Watch_Post,Sage_Lab,Sage_Home,Gplus_Look,Comments_re_Delivery,Troublesome_Parts,Comments_re_Troublesome,Motivating_Parts,Comments_re_Motivating,AoB):
        self.Student_Number=Student_Number
        self.Learner_Type=Learner_Type
        self.Ease_of_Access=Ease_of_Access
        self.Ease_of_Reading=Ease_of_Reading
        self.Watch_Prior=Watch_Prior
        self.Watch_Post=Watch_Post
        self.Sage_Lab=Sage_Lab
        self.Sage_Home=Sage_Home
        self.Gplus_Look=Gplus_Look
        self.Comments_re_Delivery=Comments_re_Delivery
        self.Troublesome_Parts=Troublesome_Parts
        self.Comments_re_Troublesome=Comments_re_Troublesome
        self.Motivating_Parts=Motivating_Parts
        self.Comments_re_Motivating=Comments_re_Motivating
        self.AoB=AoB



import csv

def add_comment_to_file(file,string):
    if string!="":
        f=open(file,"ab")
        f.write("\n")
        f.write("---")
        f.write("\n")
        f.write("%s \n"%string)
        f.write("\n")
        f.close()

def display_string(string):
    print (len(string)+_sage_const_4 )*"-"
    print "|"," "*len(string),"|"
    print "|",string,"|"
    print "|"," "*len(string),"|"
    print (len(string)+_sage_const_4 )*"-"

def data_eval(string):
    try:
        return eval(string)
    except:
        if string=='Yes':
            string=True
        if string=='No':
            string=False
        return string

def dict_increment(dict,string):
    if string=="":
        string="No Response"
    if string in dict:
        dict[string]+=_sage_const_1 
    else:
        dict[string]=_sage_const_1 

outfile=open("Feedback_for_Weeks_1_to_4_of_MAT001.csv",'rb')
raw_data=csv.reader(outfile)
raw_data=[row for row in raw_data]
outfile.close()
raw_data=[[data_eval(e) for e in row] for row in raw_data]

N=len(raw_data)
nbr_of_variables=len(raw_data[_sage_const_0 ])

string="Data read in with %s students and %s variables"%(N,nbr_of_variables)
display_string(string)

Students=[]

for row in raw_data[_sage_const_1 :]:
    Students.append(Student(row[_sage_const_1 ],row[_sage_const_2 ],row[_sage_const_3 ],row[_sage_const_4 ],row[_sage_const_5 ],row[_sage_const_6 ],row[_sage_const_7 ],row[_sage_const_8 ],row[_sage_const_9 ],row[_sage_const_10 ],row[_sage_const_11 ],row[_sage_const_12 ],row[_sage_const_13 ],row[_sage_const_14 ],row[_sage_const_15 ]))

Learner_Types={}
Ease_of_Access_Dict={}
Ease_of_Reading_Dict={}
Watch_Prior_Dict={}
Watch_Post_Dict={}
Sage_Lab_Dict={}
Sage_Home_Dict={}
Troublesome_Parts_Dict={}
Motivating_Parts_Dict={}

f=open("Delivery_Comments.md","wb")
f.write("##Delivery\n")
f.close()
f=open("Troublesome_Parts_Comments.md","wb")
f.write("##Troublesome Parts\n")
f.close()
f=open("Motivating_Parts_Comments.md","wb")
f.write("##Motivating Parts\n")
f.close()
f=open("AoB.md","wb")
f.write("##AoB\n")
f.close()
for student in Students:
    if student.Learner_Type!="":
        lt=student.Learner_Type.split()[_sage_const_0 ]
    else:
        lt="No response"
    student.Learner_Type=lt

    dict_increment(Learner_Types,lt)
    dict_increment(Ease_of_Access_Dict,"%s"%student.Ease_of_Access)
    dict_increment(Ease_of_Reading_Dict,"%s"%student.Ease_of_Reading)
    dict_increment(Watch_Prior_Dict,"%s"%student.Watch_Prior)
    dict_increment(Watch_Post_Dict,"%s"%student.Watch_Post)
    dict_increment(Sage_Lab_Dict,"%s"%student.Sage_Lab)
    dict_increment(Sage_Home_Dict,"%s"%student.Sage_Home)
    for e in student.Troublesome_Parts.split(","):
        dict_increment(Troublesome_Parts_Dict,e.lstrip())
    for e in student.Motivating_Parts.split(","):
        dict_increment(Motivating_Parts_Dict,e.lstrip())

    #Write Markdown file with comments from students about delivery:
    add_comment_to_file("Delivery_Comments.md",student.Comments_re_Delivery)

    #Write Markdown file with comments from students about troublesome aspects:
    add_comment_to_file("Troublesome_Parts_Comments.md",student.Comments_re_Troublesome)

    #Write Markdown file with comments from students about motivating aspects:
    add_comment_to_file("Motivating_Parts_Comments.md",student.AoB)

    #Write Markdown file with AoB comments:
    add_comment_to_file("AoB.md",student.AoB)

p=list_plot([[_sage_const_0 ,_sage_const_0 ]],size=_sage_const_0 )
k=_sage_const_0 
colors=rainbow(len(Learner_Types))
for e in Learner_Types:
    k+=_sage_const_1 
    p+=list_plot([[k,Learner_Types[e]]],legend_label="%s: "%k+e,color=colors[k-_sage_const_1 ],size=_sage_const_30 )
p.set_legend_options(loc=(_sage_const_p1 ,_sage_const_p8 ))
p.save("Learner_Type_Plot.pdf")

print "Learner_Types: ",Learner_Types
print "Ease_of_Access: ",Ease_of_Access_Dict
print "Ease_of_Reading: ",Ease_of_Reading_Dict
print "Watch_Prior: ",Watch_Prior_Dict
print "Watch_Post: ",Watch_Post_Dict
print "Sage_Lab: ",Sage_Lab_Dict
print "Sage_Home: ",Sage_Home_Dict
print "Troublesome_Parts: ",Troublesome_Parts_Dict
print "Motivating_Parts: ",Motivating_Parts_Dict
